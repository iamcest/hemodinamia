# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://coffeescript.org/


class  Sankey_diagram
 init: (json) ->
        @present(json) 

   


 present: (json) ->

    units = "Widgets"

    margin = {top: 10, right: 10, bottom: 10, left: 10}
    width = 740 - margin.left - margin.right
    height = 740 - margin.top - margin.bottom

    formatNumber = d3.format(",.0f")

    format = (d) -> return formatNumber(d) + " " + units
    
    color = d3.scale.category20();

    dragmove = (d) ->
      d3.select(this).attr("transform", 
        "translate(" + (
        	   d.x = Math.max(0, Math.min(width - d.dx, d3.event.x))
        	) + "," + (
                   d.y = Math.max(0, Math.min(height - d.dy, d3.event.y))
            ) + ")");
      sankey.relayout();
      link.attr("d", path);
    
   

    svg = d3.select(".lesion_device_relation").append("svg")
      .attr("id","sankey_svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
      .append("g")
      .attr("transform",
          "translate(" + margin.left + "," + margin.top + ")");
   
 
    nodeMap = {}
    json.nodes.forEach((x) -> nodeMap[x.name] = x; );
    json.links = json.links.map( (x) ->
          return {
          source: nodeMap[x.source],
          target: nodeMap[x.target],
          value: x.value
            }
        )
    
    sankey = d3.sankey()
      .nodeWidth(26)
      .nodePadding(20)
      .size([width, height])
      .nodes(json.nodes)
      .links(json.links)
      .layout(32)

    
    path = sankey.link()
   
      
    link = svg.append("g").selectAll(".link")
      .data(json.links)
      .enter().append("path")
       .attr("class", "link")
       .attr("d", path)
       .style("stroke-width", 6)
       #.style("stroke-width", (d) ->  return Math.max(1, d.dy); )
       .sort( (a, b) ->  return b.dy - a.dy; );

    
    link.append("title")
      .text( (d) ->  return "Lesion Number: " + d.source.name + " -> " + 'Device: '+ d.target.name)


    node = svg.append("g").selectAll(".node")
       .data(json.nodes)
       .enter().append("g")
       .attr("class", "node")
       .attr("transform", (d) -> 
                return "translate(" + d.x + "," + d.y + ")"; )
       .call(d3.behavior.drag()
       .origin((d) -> return d; )
       .on("dragstart", () -> 
                this.parentNode.appendChild(this); )
       .on("drag", dragmove));
     
    node.append("rect")
        .attr("height", (d) ->  return d.dy; )
        .attr("width", sankey.nodeWidth())
        .style("fill",  (d) -> 
              return d.color = color(d.name.replace(/ .*/, "")); )
        .style("stroke", (d) ->
              return d3.rgb(d.color).darker(2); )
        .append("title")
        .text( (d) ->
           #return d.name + "\n" + format(d.value); )
           return d.name )
    
    node.append("text")
      .attr("x", -6)
      .attr("y", (d) -> return d.dy / 2; )
      .attr("dy", ".35em")
      .attr("text-anchor", "end")
      .attr("transform", null)
      .text( (d) -> return d.name; )
      .filter( (d) -> return d.x < width / 2; )
      .attr("x", 6 + sankey.nodeWidth())
      .attr("text-anchor", "start")
      .style("font", "sans-serif")
      .style("font-size", "1.3em")
      .style("font-weight","bold")
      .style("fill","darkblue") 


 remove: () ->
    elm = d3.select("#sankey_svg")
    elm.remove()

 

sankey = new Sankey_diagram()

get_data = (pci_procedure_id,cath_procedure_id) ->
  data =  {'id' :pci_procedure_id,'cath_procedure_id' :cath_procedure_id}
  $.ajax({
    type: 'GET'
    url: "/pci_procedures/find_lesion_device_relation"
    data: data
    dataType: 'json'
    error: (xhr,status) ->
       alert("Something wrong went on: "   + status)
       return false
    success: (response) ->
       present_tree(response)       
  })

present_tree = (response) ->
  sankey.remove()
  sankey.init(response)

this.remove_graphics =  () -> 
  sankey.remove()  



this.show_lesion_device = (pci_procedure_id, cath_procedure_id) ->
    get_data(pci_procedure_id,cath_procedure_id)

class Vew_lesion_characteristics

  show_table: (selector_div, url_site, lesion_id) -> 
      data =  {'pci_lesion_id':lesion_id}
      selector = $("#"+selector_div)
      $.ajax({
      type: 'GET'
      url: url_site
      data: data
      dataType: 'html'
      error: (xhr,status) ->
       alert("Something wrong went on: "   + status)
       return false
      success: (response) ->
        jQuery('<span class="dialog"></span>')
                .html(response)
                .appendTo(selector)
                .dialog({
                  dialogClass: "dialogStyle",
                  modal:false,
                  resizable:true,
                  width:"auto",
                  height:"auto",
                  title:"View",
                  show:{effect:"blind",duration: 1000}
                  hide:{effect: "clip",duration: 500}
                  buttons: [
                    {
                      text: "Close",
                      click: -> 
                        $( this ).dialog( "close" )
                    } 
                    ] 
                } )

          

      })

desc = new Vew_lesion_characteristics()

this.view_lesions_descriptions = (lesion_id) ->
    url = "/pci_lesions_descriptions/view_lesions_descriptions_table"
    selector_div = "lesions_desc"
    desc.show_table(selector_div, url, lesion_id)

this.view_lesions_complications = (lesion_id) ->
    url = "/pci_lesions_complications/view_lesions_complications_table"
    selector_div = "lesions_complication"
    desc.show_table(selector_div, url, lesion_id)

this.view_lesions_treated = (lesion_id) ->
    url = "/pci_prior_treated_lesions/view_lesions_treated_table"
    selector_div = "lesions_treated"
    desc.show_table(selector_div, url, lesion_id)

